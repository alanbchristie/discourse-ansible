---

# Set to 'absent' to undeploy
d_state: present

# Deployment namespace
d_namespace: discourse

# Discourse variables
d_hostname: SetMe
d_sitename: Discourse
d_username: admin
d_password: SetMe
d_email: SetMe

# PostgreSQL details
d_pg_root_password: SetMe
d_discourse_pg_username: bn_discourse
d_discourse_pg_password: bitnami1
d_discourse_pg_name: bitnami_application

# Redis details
d_redis_password: SetMe

# SMTP details
# If you set the host the port must be valid.
# If you set the user the password must be set.
d_smtp_host: SetMe
d_smtp_port: 587
d_smtp_user: SetMe
d_smtp_password: SetMe

# Persistent volumes
# Discourse
d_vol_storageclass: SetMe
d_vol_size_g: 80
# Redis
d_redis_vol_storageclass: SetMe
d_redis_vol_size_g: 8
# Postgres
d_postgres_vol_storageclass: SetMe
d_postgres_vol_size_g: 50

# A pull-secret for images.
# If set this is the base-64 string that can be used as the value
# in our Kubernetes Secret as the .dockerconfigjson value.
# If set it is applied to the ServiceAccount in the namespace
# and applied to Pods that use that namespace.
d_dockerhub_pullsecret: ''

# If the 'crone' (cron-rclone) provider is set
# the Discourse Pod will also container cron-driven rclone
# to synchronise the backups to a remote S3 service.
d_crone_target_provider: ''
d_crone_target_access_key_id: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
d_crone_target_secret_access_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
d_crone_target_endpoint: ''
d_crone_data_path: discourse/public/backups/default
d_crone_remote_path: discourse-backups/development
