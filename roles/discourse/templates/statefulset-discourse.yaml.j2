---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: discourse
  namespace: {{ d_namespace }}
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: discourse
  serviceName: discourse
  template:
    metadata:
      name: discourse
      labels:
        name: discourse
    spec:
      serviceAccountName: discourse

      # We must have a 'core' node
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: informaticsmatters.com/purpose-core
                operator: Exists

      containers:

      # Discourse Container
      #
      - name: discourse
        image: {{ d_image_registry }}/{{ d_image_name }}:{{ d_image_tag }}
        imagePullPolicy: IfNotPresent
        terminationMessagePolicy: FallbackToLogsOnError
        ports:
        - containerPort: 3000
          name: http
{% if d_enable_probes %}
        # Readiness doesn't restart the container when it fails.
        # but liveness can. Initial deployments (i.e. those that
        # require the "Precompiling assets" stage) can take a significant
        # time to become ready. Here we wait for at least 10 minutes
        # (600 seconds) and then give the container another 5 minutes
        # to become ready.
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 600
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
{% endif %}
        env:
        # Discourse details
        - name: DISCOURSE_USERNAME
          value: '{{ d_username }}'
        - name: DISCOURSE_PASSWORD
          value: '{{ d_password }}'
        - name: DISCOURSE_EMAIL
          value: '{{ d_email }}'
        - name: DISCOURSE_SITE_NAME
          value: '{{ d_sitename }}'
        - name: DISCOURSE_HOST
          value: '{{ d_hostname }}'
        - name: DISCOURSE_SKIP_INSTALL
          value: 'no'
        - name: DISCOURSE_PRECOMPILE_ASSETS
          value: 'yes'
        - name: DISCOURSE_PASSENGER_SPAWN_METHOD
          value: 'direct'
        # PostgreSQL details
        - name: POSTGRESQL_ROOT_USER
          value: 'postgres'
        - name: POSTGRESQL_ROOT_PASSWORD
          value: '{{ d_pg_root_password }}'
        - name: DISCOURSE_DATABASE_HOST
          value: 'postgres'
        - name: DISCOURSE_DATABASE_PORT_NUMBER
          value: '5432'
        - name: POSTGRESQL_CLIENT_POSTGRES_USER
          value: 'postgres'
        - name: POSTGRESQL_CLIENT_POSTGRES_PASSWORD
          value: '{{ d_pg_root_password }}'
        - name: DISCOURSE_DATABASE_USER
          value: '{{ d_discourse_pg_username }}'
        - name: DISCOURSE_DATABASE_PASSWORD
          value: '{{ d_discourse_pg_password }}'
        - name: DISCOURSE_DATABASE_NAME
          value: '{{ d_discourse_pg_name }}'
        # Redis details
        - name: DISCOURSE_REDIS_HOST
          value: 'redis'
        - name: DISCOURSE_REDIS_PORT_NUMBER
          value: '6379'
        - name: DISCOURSE_REDIS_PASSWORD
          value: '{{ d_redis_password }}'
{% if d_smtp_host not in ['SetMe'] %}
        # SMTP details
        - name: DISCOURSE_SMTP_HOST
          value: '{{ d_smtp_host }}'
        - name: DISCOURSE_SMTP_PORT
          value: '{{ d_smtp_port }}'
{% if d_smtp_user not in ['SetMe'] %}
        - name: DISCOURSE_SMTP_USER
          value: '{{ d_smtp_user }}'
        - name: DISCOURSE_SMTP_AUTH
          value: 'login'
{% if d_smtp_password not in ['SetMe'] %}
        - name: DISCOURSE_SMTP_PASSWORD
          value: '{{ d_smtp_password }}'
{% endif %}
{% else %}
        - name: SMTP_AUTH
          value: 'no'
{% endif %}
{% endif %}
        # Debug
        - name: NAMI_LOG_LEVEL
          value: '{{ d_image_log_level }}'
        resources:
{% if d_cpu_limit or d_mem_limit %}
          limits:
{% if d_cpu_limit %}
            cpu: {{ d_cpu_limit }}
{% endif %}
{% if d_mem_limit %}
            memory: {{ d_mem_limit }}
{% endif %}
{% endif %}
          requests:
            cpu: {{ d_cpu_request }}
            memory: {{ d_mem_request }}
        volumeMounts:
        - mountPath: /bitnami/discourse
          subPath: discourse
          name: discourse-data

      # Discourse Sidekiq Container
      #
      - name: discourse-sidekiq
        image: {{ d_image_registry }}/{{ d_image_name }}:{{ d_image_tag }}
        imagePullPolicy: IfNotPresent
        terminationMessagePolicy: FallbackToLogsOnError
        command:
        - bash
        - -c
        - |
          /opt/bitnami/scripts/discourse-sidekiq/setup.sh
          /opt/bitnami/scripts/discourse-sidekiq/run.sh
        env:
        # Discourse details
        - name: DISCOURSE_HOST
          value: '{{ d_hostname }}'
        - name: DISCOURSE_DATABASE_HOST
          value: 'postgres'
        - name: DISCOURSE_DATABASE_PORT_NUMBER
          value: '5432'
        - name: DISCOURSE_DATABASE_USER
          value: '{{ d_discourse_pg_username }}'
        - name: DISCOURSE_DATABASE_PASSWORD
          value: '{{ d_discourse_pg_password }}'
        - name: DISCOURSE_DATABASE_NAME
          value: '{{ d_discourse_pg_name }}'
        # Redis details
        - name: DISCOURSE_REDIS_HOST
          value: 'redis'
        - name: DISCOURSE_REDIS_PORT_NUMBER
          value: '6379'
        - name: DISCOURSE_REDIS_PASSWORD
          value: '{{ d_redis_password }}'
        # SMTP details
        - name: DISCOURSE_SMTP_HOST
          value: '{{ d_smtp_host }}'
        - name: DISCOURSE_SMTP_PORT
          value: '{{ d_smtp_port }}'
        - name: DISCOURSE_SMTP_USER
          value: '{{ d_smtp_user }}'
        - name: DISCOURSE_SMTP_AUTH
          value: 'login'
        - name: DISCOURSE_SMTP_PASSWORD
          value: '{{ d_smtp_password }}'
        # Debug
        resources:
{% if d_sidekiq_cpu_limit or d_sidekiq_mem_limit %}
          limits:
{% if d_sidekiq_cpu_limit %}
            cpu: {{ d_sidekiq_cpu_limit }}
{% endif %}
{% if d_sidekiq_mem_limit %}
            memory: {{ d_sidekiq_mem_limit }}
{% endif %}
{% endif %}
          requests:
            cpu: {{ d_sidekiq_cpu_request }}
            memory: {{ d_sidekiq_mem_request }}
        volumeMounts:
        - mountPath: /bitnami/discourse
          subPath: discourse
          name: discourse-data

{% if d_crone_target_provider %}
      # Discourse 'crone' (cron-rclone) Container
      #
      - name: discourse-crone
        image: {{ d_crone_image_registry }}/{{ d_crone_image_name }}:{{ d_crone_image_tag }}
{% if d_crone_image_tag in ['latest', 'stable'] %}
        imagePullPolicy: Always
{% else %}
        imagePullPolicy: IfNotPresent
{% endif %}
        terminationMessagePolicy: FallbackToLogsOnError
        env:
        - name: RCLONE_CONFIG_TARGET_PROVIDER
          value: {{ d_crone_target_provider }}
        - name: RCLONE_CONFIG_TARGET_ACCESS_KEY_ID
          value: {{ d_crone_target_access_key_id }}
        - name: RCLONE_CONFIG_TARGET_SECRET_ACCESS_KEY
          value: {{ d_crone_target_secret_access_key }}
        - name: RCLONE_CONFIG_TARGET_ENDPOINT
          value: {{ d_crone_target_endpoint }}
        - name: DATA_PATH
          value: {{ d_crone_data_path }}
        - name: REMOTE_PATH
          value: {{ d_crone_remote_path }}
        resources:
{% if d_crone_cpu_limit or d_crone_mem_limit %}
          limits:
{% if d_crone_cpu_limit %}
            cpu: {{ d_crone_cpu_limit }}
{% endif %}
{% if d_crone_mem_limit %}
            memory: {{ d_crone_mem_limit }}
{% endif %}
{% endif %}
          requests:
            cpu: {{ d_crone_cpu_request }}
            memory: {{ d_crone_mem_request }}
        volumeMounts:
        - mountPath: /data/discourse
          subPath: discourse
          name: discourse-data
{% endif %}

      volumes:
      - name: discourse-data
        persistentVolumeClaim:
          claimName: discourse
