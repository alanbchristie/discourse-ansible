---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: redis
  namespace: {{ d_namespace }}
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: redis
  serviceName: redis
  template:
    metadata:
      name: redis
      labels:
        name: redis
    spec:
      serviceAccountName: discourse

      # We must have a 'core' node
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: informaticsmatters.com/purpose-core
                operator: Exists

      securityContext:
        runAsUser: 1001
        runAsGroup: 0
        fsGroup: 0

      containers:
      - name: redis
        image: {{ d_redis_image_registry }}/{{ d_redis_image_name }}:{{ d_redis_image_tag }}
        imagePullPolicy: IfNotPresent
        terminationMessagePolicy: FallbackToLogsOnError
        ports:
        - containerPort: 6379
          name: redis
        env:
        - name: REDIS_PASSWORD
          value: '{{ d_redis_password }}'
        resources:
{% if d_redis_cpu_limit or d_redis_mem_limit %}
          limits:
{% if d_redis_cpu_limit %}
            cpu: {{ d_redis_cpu_limit }}
{% endif %}
{% if d_redis_mem_limit %}
            memory: {{ d_redis_mem_limit }}
{% endif %}
{% endif %}
          requests:
            cpu: {{ d_redis_cpu_request }}
            memory: {{ d_redis_mem_request }}
        volumeMounts:
        - mountPath: /bitnami
          name: redis

      volumes:
      - name: redis
        persistentVolumeClaim:
          claimName: redis
